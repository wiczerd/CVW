gvec[seq(TT+1,2*TT)]   = n[,3] *(x[1:TT,3]           -theta[8]- theta[1]  *theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,10)])
gvec[seq(1+2*TT,3*TT)] = n[,4] *(x[1:TT,4]           -theta[8]- theta[1]^2*theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,10)])
gvec[seq(1+3*TT,4*TT)] = n[,5] *(x[1:TT,5] - theta[7]-theta[8]-            theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(2,10)])
gvec[seq(1+4*TT,5*TT)] = n[,6] *(x[1:TT,6]           -theta[8]- theta[3]  *theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(2,10)])
gvec[seq(1+5*TT,6*TT)] = n[,7] *(x[1:TT,7]           -theta[8]- theta[3]^2*theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(2,10)])
gvec[seq(1+6*TT,7*TT)] = n[,8] *(x[1:TT,8] - theta[7]-theta[8]-            theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(2,10)])
gvec[seq(1+7*TT,8*TT)] = n[,9] *(x[1:TT,9]           -theta[8]- theta[5]  *theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(2,10)])
gvec[seq(1+8*TT,9*TT)] = n[,10]*(x[1:TT,10]          -theta[8]- theta[5]^2*theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(2,10)])
gvec[!is.finite(gvec)]= 0.
return(gvec)
}
ub = c( .9999,.3,.9999,.3,.9999,.3,.3,.3)
lb = c( .5   ,.0,.5   ,.0,.5   ,.0,.0,.0)
nx = length(ub)
optf_d123 <- array(NA,dim=nstart)
optx_d123 <- array(NA,dim=c(nstart,nx))
for( si in seq(1,nstart) ){
xhr <- runif(nx)*(ub-lb)+lb
optresult_d123 <- optim( par=xhr, fn=sqgobj , method="L-BFGS-B",lower=lb,upper=ub,control=list(ndeps=array(1e-4,nx)),
dat=as.matrix(d123PSIDvcov),n=as.matrix(d123PSIDvcovN) )
optf_d123[si] <- optresult_d123$value
optx_d123[si,]<- optresult_d123$par
}
optx_d123[si,]
optresult_d123
optresult_nm_d1
optresult_nm_d2
optresult_nm_d3
write.csv( d123PSIDvcov , "vcovProfiles.csv")
pwd
getwd()
source('~/GoogleDrive/Disability/DisabilityOption/Code/incProcEst.R')
lm(d3Var~Age, data=d123PSIDvcov)
lm(d2Var~Age, data=d123PSIDvcov)
lm(d1Var~Age, data=d123PSIDvcov)
optresult_d123
source('~/GoogleDrive/Disability/DisabilityOption/Code/incProcEst.R')
gobj_joint<- function(theta,x,n){
#             1     2          3     4           5      6          7              8
# theta = ( rhod1,sigma2etad1,rhod2,sigma2etad2,rhod3,sigma2etad3,sigma2epsilon,sigma2alpha)
gvec <- array(0,dim=TT*9)
gvec[seq(1,TT)]        = n[,2] *(x[1:TT,2] - theta[7]-theta[10]-            theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,10)])
gvec[seq(TT+1,2*TT)]   = n[,3] *(x[1:TT,3]           -theta[10]- theta[1]  *theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,10)])
gvec[seq(1+2*TT,3*TT)] = n[,4] *(x[1:TT,4]           -theta[10]- theta[1]^2*theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,10)])
gvec[seq(1+3*TT,4*TT)] = n[,5] *(x[1:TT,5] - theta[8]-theta[10]-            theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(2,10)])
gvec[seq(1+4*TT,5*TT)] = n[,6] *(x[1:TT,6]           -theta[10]- theta[3]  *theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(2,10)])
gvec[seq(1+5*TT,6*TT)] = n[,7] *(x[1:TT,7]           -theta[10]- theta[3]^2*theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(2,10)])
gvec[seq(1+6*TT,7*TT)] = n[,8] *(x[1:TT,8] - theta[9]-theta[10]-            theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(2,10)])
gvec[seq(1+7*TT,8*TT)] = n[,9] *(x[1:TT,9]           -theta[10]- theta[5]  *theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(2,10)])
gvec[seq(1+8*TT,9*TT)] = n[,10]*(x[1:TT,10]          -theta[10]- theta[5]^2*theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(2,10)])
gvec[!is.finite(gvec)]= 0.
return(gvec)
}
sqgobj_joint <- function(theta,dat,n){
gobjvec <-gobj_joint(theta,dat,n)
sum(gobjvec^2)
}
ub = c( .9999,.3,.9999,.3,.9999,.3,.3,.3,.3,.3)
lb = c( .5   ,.0,.5   ,.0,.5   ,.0,.0,.0,.0,.0)
nx = length(ub)
nx
optf_d123 <- array(NA,dim=nstart)
optx_d123 <- array(NA,dim=c(nstart,nx))
for( si in seq(1,nstart) ){
xhr <- runif(nx)*(ub-lb)+lb
optresult_d123 <- optim( par=xhr, fn=sqgobj , method="L-BFGS-B",lower=lb,upper=ub,control=list(ndeps=array(1e-4,nx)),
dat=as.matrix(d123PSIDvcov),n=as.matrix(d123PSIDvcovN) )
optf_d123[si] <- optresult_d123$value
optx_d123[si,]<- optresult_d123$par
}
optf_d123
optx_d123[si,]
gvprofiles_obj_joint<- function(theta,x,n){
#             1     2          3     4           5      6          7
# theta = ( rhod1,sigma2etad1,rhod2,sigma2etad2,rhod3,sigma2etad3,sigma2epsilon+sigma2alpha)
gvec <- array(0,dim=TT*3)
gvec[seq(1,TT)]        = n[,2] *(x[1:TT,2] - theta[7]          -            theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,4)])
#gvec[seq(TT+1,2*TT)]   = n[,3] *(x[1:TT,3]           -theta[8]- theta[1]  *theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,4)])
#gvec[seq(1+2*TT,3*TT)] = n[,4] *(x[1:TT,4]           -theta[8]- theta[1]^2*theta[2]*(1-theta[1]^(2*x[1:TT,1]+1))/(1-theta[1]^2))/sum(n[,seq(2,4)])
gvec[seq(1+ TT,2*TT)] = n[,5] *(x[1:TT,5] - theta[8]          -            theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(5,7)])
#gvec[seq(1+4*TT,5*TT)] = n[,6] *(x[1:TT,6]           -theta[8]- theta[3]  *theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(5,7)])
#gvec[seq(1+5*TT,6*TT)] = n[,7] *(x[1:TT,7]           -theta[8]- theta[3]^2*theta[4]*(1-theta[3]^(2*x[1:TT,1]+1))/(1-theta[3]^2))/sum(n[,seq(5,7)])
gvec[seq(1+2*TT,3*TT)] = n[,8] *(x[1:TT,8] - theta[9]         -            theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(8,10)])
#gvec[seq(1+4*TT,5*TT)] = n[,9] *(x[1:TT,9]           -theta[8]- theta[5]  *theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(8,10)])
#gvec[seq(1+5*TT,6*TT)] = n[,10]*(x[1:TT,10]          -theta[8]- theta[5]^2*theta[6]*(1-theta[5]^(2*x[1:TT,1]+1))/(1-theta[5]^2))/sum(n[,seq(8,10)])
gvec[!is.finite(gvec)]= 0.
return(gvec)
}
sqgvprofiles_obj_joint <- function(theta,dat,n){
gobjvec <-gvprofiles_obj_joint(theta,dat,n)
sum(gobjvec^2)
}
ub = c( .9999,.3,.9999,.3,.9999,.3,.3,.3,.3)
lb = c( .5   ,.0,.5   ,.0,.5   ,.0,.0,.0,.0)
nx = length(ub)
optf_d123 <- array(NA,dim=nstart)
optx_d123 <- array(NA,dim=c(nstart,nx))
for( si in seq(1,nstart) ){
xhr <- runif(nx)*(ub-lb)+lb
optresult_d123 <- optim( par=xhr, fn=sqgobj , method="L-BFGS-B",lower=lb,upper=ub,#control=list(ndeps=1e-4),
dat=as.matrix(d123PSIDvcov),n=as.matrix(d123PSIDvcovN) )
optf_d123[si] <- optresult_d123$value
optx_d123[si,]<- optresult_d123$par
}
optf_d123
optx_d123[si,]
PSID[ , del.HeckitResid2 := next.HeckitResid2-HeckitResid2]
PSID[ , del2.HeckitResid2 := next2.HeckitResid2-next.HeckitResid2]
PSID[ Wlimit0vAM==1, Wlimit := 0]
PSID[ Wlimit1vAM==1, Wlimit := 1]
PSID[ Wlimit2vAM==1, Wlimit := 2]
delPSIDvar  <- PSID[ , var(del.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDcov  <- PSID[ , var(del.HeckitResid2,del2.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDvar
delPSIDvar  <- PSID[ is.finite(Wlimit)==T, var(del.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDcov  <- PSID[ is.finite(Wlimit)==T, var(del.HeckitResid2,del2.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDvar
delPSIDcov
delPSIDmean <- PSID[ is.finite(Wlimit)==T, mean(del.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDmean
PSID[ , del.HeckitResid2 := HeckitResid2-shift(HeckitResid2,type="lag"), by=id]
delPSIDmean <- PSID[ is.finite(Wlimit)==T, mean(del.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDvar  <- PSID[ is.finite(Wlimit)==T, var(del.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDmean
delPSIDvar
delPSIDcov  <- PSID[ is.finite(Wlimit)==T, var(del.HeckitResid2,del1.HeckitResid2,na.rm = T),by=Wlimit]
PSID[ , del1.HeckitResid2 := next.HeckitResid2-HeckitResid2]
PSID[ , del2.HeckitResid2 := next2.HeckitResid2-next.HeckitResid2]
delPSIDcov  <- PSID[ is.finite(Wlimit)==T, var(del.HeckitResid2,del1.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDcov
delPSIDcov2 <- PSID[ is.finite(Wlimit)==T, var(del.HeckitResid2,del2.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDcov2
delPSIDcov2/delPSIDcov
PSID[ , del3.HeckitResid2 := shift(next2.HeckitResid2,type="lead")-next2.HeckitResid2,by=id]
delPSIDcov3 <- PSID[ is.finite(Wlimit)==T, var(del.HeckitResid2,del3.HeckitResid2,na.rm = T),by=Wlimit]
delPSIDcov3
delPSIDcov3/delPSIDcov2
delPSIDcov3/delPSIDcov
difPSIDvcov  = array(NA,dim=20)
difPSIDvcovN = array(NA,dim=20)
Nl = 20
li=0
PSID[  , delL.HeckitResid2:= shift(del.HeckitResid2,li,type = "lead"), by =id]
tmp <- PSID[ is.finite(Wlimit), var(del.HeckitResid2,delL.HeckitResid2 ), by=Wlimit]
tmp
tmp <- PSID[ is.finite(Wlimit), var(del.HeckitResid2,delL.HeckitResid2,na.rm=T ), by=Wlimit]
tmp
tmpN<- PSID[ is.finite(Wlimit), sum(is.finite(del.HeckitResid2) & is.finite(delL.HeckitResid2) ), by=Wlimit]
tmpN
PSID[  , delL.HeckitResid2:= NULL]
setkey(tmp, Wlimit)
setkey(tmpN, Wlimit)
difPSIDvcov [li+1,] = tmp$V1
difPSIDvcovN[li+1,] = tmpN$V1
difPSIDvcov [li+1,]
difPSIDvcov
difPSIDvcov  = array(NA,dim=c(Nl,3))
difPSIDvcovN = array(NA,dim=c(Nl,3))
difPSIDvcov [li+1,] = tmp$V1
difPSIDvcov
difPSIDvcovN[li+1,] = tmpN$V1
for(li in seq(0,19)){
PSID[  , delL.HeckitResid2:= shift(del.HeckitResid2,li,type = "lead"), by =id]
tmp <- PSID[ is.finite(Wlimit), var(del.HeckitResid2,delL.HeckitResid2,na.rm=T ), by=Wlimit]
tmpN<- PSID[ is.finite(Wlimit), sum(is.finite(del.HeckitResid2) & is.finite(delL.HeckitResid2) ), by=Wlimit]
PSID[  , delL.HeckitResid2:= NULL]
setkey(tmp, Wlimit)
setkey(tmpN, Wlimit)
difPSIDvcov [li+1,] = tmp$V1
difPSIDvcovN[li+1,] = tmpN$V1
}
source('~/GoogleDrive/Disability/DisabilityOption/Code/incProcEst.R', echo=TRUE)
difPSIDvcov
difPSIDvcovN
d3PSIDvar  <- PSID[ Wlimit1vAM==1 | Wlimit2vAM==1, var(HeckitResid2,na.rm = T),by=Age]
d3PSIDcov  <- PSID[ Wlimit1vAM==1 | Wlimit2vAM==1, var(HeckitResid2,next.HeckitResid2,na.rm = T),by=Age]
d3PSIDcov2 <- PSID[ Wlimit1vAM==1 | Wlimit2vAM==1, var(HeckitResid2,next2.HeckitResid2,na.rm = T),by=Age]
d3PSIDvarN <- PSID[ Wlimit1vAM==1 | Wlimit2vAM==1, sum(is.finite(HeckitResid2)                                ),by=Age]
d3PSIDcovN <- PSID[ Wlimit1vAM==1 | Wlimit2vAM==1, sum(is.finite(HeckitResid2) & is.finite(next.HeckitResid2) ),by=Age]
d3PSIDcov2N<- PSID[ Wlimit1vAM==1 | Wlimit2vAM==1, sum(is.finite(HeckitResid2) & is.finite(next2.HeckitResid2)),by=Age]
names(d3PSIDvar  )<-c("Age","d3Var"  )
names(d3PSIDcov  )<-c("Age","d3Cov"  )
names(d3PSIDcov2 )<-c("Age","d3Cov2" )
names(d3PSIDvarN )<-c("Age","d3VarN" )
names(d3PSIDcovN )<-c("Age","d3CovN" )
names(d3PSIDcov2N)<-c("Age","d3Cov2N")
d3PSIDvcov  <- merge(d3PSIDvar  ,d3PSIDcov,   by="Age")
d3PSIDvcov  <- merge(d3PSIDvcov ,d3PSIDcov2,  by="Age")
d3PSIDvcovN <- merge(d3PSIDvarN ,d3PSIDcovN,  by="Age")
d3PSIDvcovN <- merge(d3PSIDvcovN,d3PSIDcov2N, by="Age")
setkey(d3PSIDvcov,Age)
setkey(d3PSIDvcovN,Age)
d3PSIDvcov<-d3PSIDvcov[ Age<=25]
d3PSIDvcovN<-d3PSIDvcovN[ Age<=25]
optf_d3 <- array(NA,dim=nstart)
optx_d3 <- array(NA,dim=c(nstart,nx))
for( si in seq(1,nstart) ){
xhr <- runif(nx)*(ub-lb)+lb
optresult_d3 <- optim( par=xhr, fn=sqgobj , method = "L-BFGS-B",lower=lb,upper=ub,control=list(fnscale=1),
dat=as.matrix(d3PSIDvcov),n=as.matrix(d3PSIDvcovN) )
optf_d3[si] <- optresult_d3$value
optx_d3[si,]<- optresult_d3$par
}
optresult_nm_d3 <- optim( par=optx_d3[ which.min(optf_d3), ], fn=sqgobj,gr=sqdgobj,method = "Nelder-Mead",control=list(fnscale=100),
dat=as.matrix(d3PSIDvcov),n=as.matrix(d3PSIDvcovN) )
optresult_nm_d3
optresult_nm_d2
0.02343037/(1-0.93612046 ^2)
0.01912978/(1-0.95641459^2)
optresult_nm_d2 <- optim( par=optx_d2[ which.min(optf_d2), ], fn=sqgobj,gr=sqdgobj,method = "Nelder-Mead",control=list(fnscale=1),
dat=as.matrix(d2PSIDvcov),n=as.matrix(d2PSIDvcovN) )
optresult_nm_d2
optresult_nm_d3 <- optim( par=optx_d3[ which.min(optf_d3), ], fn=sqgobj,method = "Nelder-Mead",control=list(fnscale=1),
dat=as.matrix(d3PSIDvcov),n=as.matrix(d3PSIDvcovN) )
optresult_nm_d3
min(optf_d3)
which.min(optf_d3)
source('~/GoogleDrive/Disability/DisabilityOption/Code/incProcEst.R', echo=TRUE)
optresult_nm_d1
optresult_nm_d3
0.01446509/(1-0.95260904^2)
0.02344495/(1-0.93609776^2)
optresult_nm_d3
optresult_nm_d2
gobj_del <- function(theta,x,n){
gvec <- array(0,dim=Nl)
#theta = rho,sigma2eta,sigma2epsilon
gvec[1]           = n[1]         *( x[1]   - x[1]) # Set this to zero now. Can I use variance w/o age?  #2*theta[3] )
gvec[2]           = n[2]         *(x[2]    - theta[1]*(theta[1]-1)^2*theta[2] + theta[3])/sum(n)
gvec[seq(3,li)]   = n[seq(3,li)] *(x[3:li] - theta[1]^(seq(3,li)-1)*(1-theta[1])/(1+theta[1])*theta[2]  )/sum(n)
}
gobj_del <- function(theta,x,n){
gvec <- array(0,dim=Nl)
#theta = rho,sigma2eta,sigma2epsilon
gvec[1]           = n[1]         *( x[1]   - x[1]) # Set this to zero now. Can I use variance w/o age?  #2*theta[3] )
gvec[2]           = n[2]         *(x[2]    - theta[1]*(theta[1]-1)^2*theta[2] + theta[3])/sum(n)
gvec[seq(3,li)]   = n[seq(3,li)] *(x[3:li] - theta[1]^(seq(3,li)-1)*(1-theta[1])/(1+theta[1])*theta[2]  )/sum(n)
return(gvec[is.finite(gvec)])
}
sqgobj_del <- function(theta,dat,n){
sum(gobj_del(theta,dat,n)^2)
}
difPSIDvcov
optresult_del_d1<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),control=list(ndeps=array(1e-4,nx)),
dat=difPSIDvcov[,1],n=difPSIDvcovN[,1] )
optresult_del_d1<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,1],n=difPSIDvcovN[,1] )
optresult_del_d1
optresult_del_d3<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,3],n=difPSIDvcovN[,3] )
optresult_del_d3
optresult_del_d2<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,2],n=difPSIDvcovN[,2] )
optresult_del_d2
gobj_del <- function(theta,x,n){
gvec <- array(0,dim=Nl)
#theta = rho,sigma2eta,sigma2epsilon
gvec[1]           = n[1]         *( x[1]   - x[1]) # Set this to zero now. Can I use variance w/o age?  #2*theta[3] )
gvec[2]           = n[2]         *(x[2]    - theta[1]*(theta[1]-1)^2*theta[2] + theta[3])/sum(n)
gvec[seq(3,li)]   = n[seq(3,li)] *(x[3:li] + theta[1]^(seq(3,li)-1)*(1-theta[1])/(1+theta[1])*theta[2]  )/sum(n)
return(gvec[is.finite(gvec)])
}
sqgobj_del <- function(theta,dat,n){
sum(gobj_del(theta,dat,n)^2)
}
optresult_del_d1<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,1],n=difPSIDvcovN[,1] )
gobj_del <- function(theta,x,n){
gvec <- array(0,dim=Nl)
#theta = rho,sigma2eta,sigma2epsilon
gvec[1]           = n[1]         *( x[1]   - x[1]) # Set this to zero now. Can I use variance w/o age?  #2*theta[3] )
gvec[2]           = n[2]         *(x[2]    - theta[1]*(theta[1]-1)^2*theta[2] + theta[3])/sum(n)
gvec[seq(3,li)]   = n[seq(3,li)] *(x[3:li] + theta[1]^(seq(3,li)-1)*(1-theta[1])/(1+theta[1])*theta[2]  )/sum(n)
return(gvec[is.finite(gvec)])
}
sqgobj_del <- function(theta,dat,n){
sum(gobj_del(theta,dat,n)^2)
}
optresult_del_d1
optresult_del_d2<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,2],n=difPSIDvcovN[,2] )
optresult_del_d3<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,3],n=difPSIDvcovN[,3] )
optresult_del_d2
optresult_del_d3
gobj_del <- function(theta,x,n){
gvec <- array(0,dim=Nl)
#theta = rho,sigma2eta,sigma2epsilon
gvec[1]           = n[1]         *( x[1]   - x[1]) # Set this to zero now. Can I use variance w/o age?  #2*theta[3] )
gvec[2]           = n[2]         *(x[2]     + theta[3])/sum(n) #theta[1]*(theta[1]-1)^2*theta[2]
gvec[seq(3,li)]   = n[seq(3,li)] *(x[3:li] + theta[1]^(seq(3,li)-1)*(1-theta[1])/(1+theta[1])*theta[2]  )/sum(n)
return(gvec[is.finite(gvec)])
}
sqgobj_del <- function(theta,dat,n){
sum(gobj_del(theta,dat,n)^2)
}
optresult_del_d1<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,1],n=difPSIDvcovN[,1] )
optresult_del_d2<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,2],n=difPSIDvcovN[,2] )
optresult_del_d3<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,3],n=difPSIDvcovN[,3] )
optresult_del_d3
optresult_del_d2
optresult_del_d1
gobj_del <- function(theta,x,n){
gvec <- array(0,dim=Nl)
#theta = rho,sigma2eta,sigma2epsilon
gvec[1]           = n[1]         *( x[1]   - x[1]) # Set this to zero now. Can I use variance w/o age?  #2*theta[3] )
gvec[2]           = n[2]         *(x[2]    - theta[1]*(theta[1]-1)^2*theta[2] + theta[3])/sum(n)
gvec[seq(3,li)]   = n[seq(3,li)] *(x[3:li] + theta[1]^(seq(3,li)-1)*(1-theta[1])/(1+theta[1])*theta[2]  )/sum(n)
return(gvec[is.finite(gvec)])
}
sqgobj_del <- function(theta,dat,n){
sum(gobj_del(theta,dat,n)^2)
}
optresult_del_d1<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,1],n=difPSIDvcovN[,1] )
optresult_del_d2<-optim( par=c(.9,.1,.1), fn=sqgobj_del , method="L-BFGS-B",lower=c(.5,.0,.0),upper=c(.9999,.3,.3),
dat=difPSIDvcov[,2],n=difPSIDvcovN[,2] )
optresult_del_d2
optresult_nm_d1
optresult_nm_d3
install.packages("sem")
install.packages("nloptr")
install.packages("sem")
install.packages("nloptr")
install.packages("sem")
library(sem)
library(foreign)
library(readstata13)
library(data.table)
library(sem)
library(seasonal)
library(seas)
install.packages(seas)
install.packages("seas")
library(seas)
vyield <- read.csv("vyield.csv")
?seasonal
?seas
install.packages("forecast")
source('~/workspace/DIgeo/SSAdata.R', echo=TRUE)
setkey(ssa,"fips","year")
AMmerged <- read.dta13(paste0(ecodatadir,"AMsandbox/Total_Merged_data.dta"))
AMmerged <-data.table(AMmerged)
setkey(AMmerged,"fips","year")
DT <- merge(ssa,AMmerged,by=c("fips","year"),all.y = F,all.x=T)
DT[ , delWage := log(AnnualAverageWeeklyWage) - log(shift(AnnualAverageWeeklyWage)), by=fips]
DT[ , delWage := log(AnnualAveragePay) - log(shift(AnnualAveragePay)), by=fips]
DT[ , delEmp := log(AnnualAverageEmployment) - log(shift(AnnualAverageEmployment)), by=fips]
DT[ , delEst := log(AnnualAverageEstablishmentCou) - log(shift(AnnualAverageEstablishmentCou)), by=fips]
DT[ !is.finite(delWage), delWage:=NA]
DT[ !is.finite(delEmp), delEmp:=NA]
DT[ !is.finite(delEst), delEst:=NA]
DT[ lm( awr~  delWage + delEmp+delEst )]
?lm
DT[ ,lm( awr~  delWage + delEmp + delEst )]
DT[ ,lm( awr~  delWage + delEmp + delEst + inMSA +HPI_YrChange+ factor(year)+factor(stfips.x))]
setwd("~/workspace/CVW/c/")
whist <- as.matrix(read.csv(paste0("./whist.csv"), header = F, strip.white  = T))
whist <- as.matrix(read.csv(paste0("./whist.csv"), header = F, strip.white  = T))
uhist <- as.matrix(read.csv(paste0("./whist.csv"), header = F, strip.white  = T))
whist <- as.matrix(read.csv(paste0("./whist.csv"), header = F, strip.white  = T))
uhist <- as.matrix(read.csv(paste0("./whist.csv"), header = F, strip.white  = T))
mean(uhist)
whist <- read.csv(paste0("./whist.csv"), header = F, strip.white  = T)
uhist <- read.csv(paste0("./whist.csv"), header = F, strip.white  = T)
jhist <- read.csv(paste0("./jhist.csv"), header = F, strip.white  = T)
Ahist <- read.csv(paste0("./Ahist.csv"), header = F, strip.white  = T)
plot(Ahist)
Alev <- read.csv(Alev.csv, header=F, strip.white=T)
alev <- read.csv(zlev.csv, header=F, strip.white=T)
tlev <- read.csv(Thlev.csv, header=F, strip.white=T)
Plev <- read.csv(Plev.csv, header=F, strip.white=T)
Alev <- read.csv("Alev.csv", header=F, strip.white=T)
alev <- read.csv("zlev.csv", header=F, strip.white=T)
tlev <- read.csv("Thlev.csv", header=F, strip.white=T)
Plev <- read.csv("Plev.csv", header=F, strip.white=T)
Alev <- as.matrix(read.csv("Alev.csv", header=F, strip.white=T))
Alev <- as.matrix(read.csv("Alev.csv", header=F, strip.white=T))
alev <- as.matrix(read.csv("zlev.csv", header=F, strip.white=T))
tlev <- as.matrix(read.csv("Thlev.csv", header=F, strip.white=T))
Plev <- as.matrix(read.csv("Plev.csv", header=F, strip.white=T))
library(margins)
library(ggplot2)
library(reshape2)
library(data.table)
library(zoo)
# read grids:
Alev <- as.matrix(read.csv("Alev.csv", header=F, strip.white=T))
alev <- as.matrix(read.csv("zlev.csv", header=F, strip.white=T))
tlev <- as.matrix(read.csv("Thlev.csv", header=F, strip.white=T))
Plev <- as.matrix(read.csv("Plev.csv", header=F, strip.white=T))
whist <- fread(paste0("./whist.csv"), header = F, sep=",")
uhist <- fread(paste0("./uhist.csv"), header = F, sep=",")
jhist <- fread(paste0("./jhist.csv"), header = F, sep=",")
Ahist <- fread(paste0("./Ahist.csv"), header = F, sep=",")
Nsim <- length(jhist)
dim(jhist)
Nsim <- dim(jhist,1)
dim(jhist)[1]
Nsim <- dim(jhist)[1]
w_melt <- melt(whist, id.var = "id", value.name = "wage")
w_melt <- data.table(w_melt)
whist$id <- seq(1:Nsim)
w_melt <- melt(whist, id.var = "id", value.name = "wage")
w_melt <- data.table(w_melt)
for(it in seq(1,Tsim)){ w_melt[ variable==paste0("V",it), t:= it] }
Tsim <- dim(jhist)[2]
Tsim
for(it in seq(1,Tsim)){ w_melt[ variable==paste0("V",it), t:= it] }
w_melt<- subset(w_melt, select = c("id","wage","t"))
simDat <- w_melt
simDat
uhist$id <- seq(1:Nsim)
u_melt <- melt(uhist, id.var = "id", value.name = "unemp")
u_melt <- data.table(u_melt)
for(it in seq(1,Tsim)){ u_melt[ variable==paste0("V",it), t:= it] }
u_melt<- subset(w_melt, select = c("id","unemp","t"))
simDat <- merge(simDat,u_melt,by=c("id","t"))
simDat <- w_melt
u_melt <- melt(uhist, id.var = "id", value.name = "unemp")
u_melt <- data.table(u_melt)
for(it in seq(1,Tsim)){ u_melt[ variable==paste0("V",it), t:= it] }
u_melt<- subset(u_melt, select = c("id","unemp","t"))
simDat <- merge(simDat,u_melt,by=c("id","t"))
simDat
Ahist
Ahist <- seq(1:Tsim)
Ahist[ , Aidx := V1]
Ahist <- fread(paste0("./Ahist.csv"), header = F, sep=",")
Ahist
Ahist$t <- seq(1:Tsim)
Ahist$Aidx <- Ahist$V1
Ahist
simDat <- merge( simDat, subset( Ahist, select=c("t","Aidx") ) ,by= "t",all = T )
simDat
simDat[ unemp==0, mean(wage)]
simDat[ unemp==0, var(wage)]
simDat[ , wagechng := wage - shift(wage), by=id]
ggplot(simDat, aes(x=wagechng)) + geom_density()
simDat[ , occ_chng := occ != shift(occ), by=id]
jhist$id <- seq(1:Nsim)
j_melt <- melt(jhist, id.var = "id", value.name = "occ")
j_melt <- data.table(j_melt)
for(it in seq(1,Tsim)){ j_melt[ variable==paste0("V",it), t:= it] }
j_melt<- subset(j_melt, select = c("id","occ","t"))
simDat <- merge(simDat,j_melt,by=c("id","t"))
simDat[ , occ_chng := occ != shift(occ), by=id]
ggplot(subset(simDat, occ_chng==T & unemp==0 & shift(unemp==0)), aes(x=wagechng)) + geom_density()
ggplot(subset(simDat, occ_chng==T & unemp==0 & shift(unemp)==0), aes(x=wagechng)) + geom_density()
ggplot(subset(simDat, unemp==0 & shift(unemp)==0), aes(x=wagechng)) + geom_density()
simDat[ , mean(occ_chng)]
simDat[ , mean(occ_chng,na.rm=T)]
simDat[ , ftable(occ,na.rm=T)]
simDat[ , ftable(occ)]
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
simDat[, ftable(occ)]
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
ggplot(subset(simDat, unemp==0 & shift(unemp)==0), aes(x=wagechng)) + geom_density()
setkey(simDat, c("id","t"))
setkeyv(simDat, c("id","t"))
simDat
ggplot(simDat, aes(x=wagechng)) + geom_density()
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
View(u_melt)
setkeyv(simDat,c("id","t"))
simDat
simDat[ , last.unemp := shift(unemp) , by=id]
simDat[ unemp==0 & last.unemp==0, quantile(wagechng)]
simDat[ , thetachng := theta-shift(theta), by=id]
simDat[ , mean(thetachng)]
simDat[ , mean(thetachng,na.rm = T)]
simDat[ , jobchng := theta!=shift(theta), by=id]
simDat[ , mean(jobchng,na.rm = T)]
simDat[ , occchng := occ!=shift(occ), by=id]
simDat[ , mean(occchng,na.rm = T)]
simDat[ , wagechng := log(wage) - log(shift(wage)), by=id]
simDat[ unemp==0 & last.unemp==0, quantile(wagechng)]
swhist <- fread(paste0("./swprob_hist.csv"), header = F, sep=",")
swhist$id <- seq(1:Nsim)
sw_melt <- melt(swhist, id.var = "id", value.name = "swProb")
sw_melt <- data.table(sw_melt)
for(it in seq(1,Tsim)){ sw_melt[ variable==paste0("V",it), t:= it] }
sw_melt<- subset(sw_melt, select = c("id","swProb","t"))
simDat <- merge(simDat,sw_melt,by=c("id","t"))
simDat
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
Phist <- fread(paste0("./Phist.csv"), header = F, sep=",")
Phist$id <- seq(1:Nsim)
P_melt <- melt(swhist, id.var = "id", value.name = "P")
P_melt <- data.table(P_melt)
for(it in seq(1,Tsim)){ P_melt[ variable==paste0("V",it), t:= it] }
P_melt<- subset(P_melt, select = c("id","P","t"))
simDat <- merge(simDat,P_melt,by=c("id","t"))
simDat
source('~/workspace/CVW/c/ReadSim.R', echo=TRUE)
setkeyv(simDat, c("id","t"))
simDat
View(swhist)
simDat[ , P:=NULL]
P_melt <- melt(Phist, id.var = "id", value.name = "P")
P_melt <- data.table(P_melt)
for(it in seq(1,Tsim)){ P_melt[ variable==paste0("V",it), t:= it] }
P_melt<- subset(P_melt, select = c("id","P","t"))
simDat <- merge(simDat,P_melt,by=c("id","t"))
setkeyv(simDat, c("id","t"))
simDat
